SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
data <- SheetList[["Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletion Log"]]
tool <- SheetList[["KOBO survey"]]
mebs <- SheetList[["MEB Composition"]]
mebs <- SheetList[["Cost of MEB"]]
### Check MEBS
items <- data %>% select("q_district", "q_municipality","q_salt_price_per_kilo","q_sugar_price_per_kilo",
"q_flour_price_per_kilo", "q_rice_price_per_kilo", "q_pasta_price_per_500g", "q_couscous_price_per_kilo",
"q_tomatop_price_per_400g", "q_chickpeas_price_per_400g", "q_beans_price_per_400g", "q_cmilk_price_per_200ml",
"q_milk_price_per_liter", "q_gtea_price_per_250g", "q_btea_price_per_250g", "q_oil_price_per_liter",
"q_tuna_price_per_200g", "q_eggs_price_per_30eggs", "q_chicken_price_per_kilo", "q_lamb_price_per_kilo",
"q_bread_price_per_5medium_pieces", "q_tomatoes_price_per_kilo", "q_onions_price_per_kilo", "q_pepper_price_per_kilo",
"q_potatoes_price_per_kilo", "q_hwsoap_price_per_piece", "q_lsoap_price_per_kilo", "q_ldet_price_per_litre",
"q_shampoo_price_per_250ml", "q_dsoap_price_per_liter", "q_toothpaste_price_per_tube", "q_toothbrush_price_per_brush",
"q_spads_price_per_10pads", "q_diapers_price_per_30diapers", "q_hsan_price_per_liter", "q_ssan_price_per_liter",
"q_public_gasoline_price_per_liter", "q_private_gasoline_price_per_liter", "q_paracetamol_price_per_12", "q_Ibuprofen_price_per_20",
"q_vitamin_b_complex_price_per_40", "q_amoxicillin_price_per_21", "q_metoclopramide_price_per_40", "q_water_price_per_liter",
"q_fuel_public_price_per_11kg", "q_fuel_private_price_per_11kg", "cooking_fuel_price_per_11kg")
## sources
source("./R/MEBCalculation_HQ.R")
mebs_check <- left_join(mebs, cities.meb, "city") %>% select("city", "full_meb", "meb") %>%
mutate(check = ifelse(full_meb == meb, TRUE, FALSE))
mebs <- SheetList[["Cost of MEB"]]
data <- "./data/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_June_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
data <- SheetList[["Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletion Log"]]
tool <- SheetList[["KOBO survey"]]
mebs <- SheetList[["Cost of MEB"]]
mebs_check <- left_join(mebs, cities.meb, "city") %>% select("city", "full_meb", "meb") %>%
mutate(check = ifelse(full_meb == meb, TRUE, FALSE))
View(mebs)
View(cities.meb)
mutate(check = ifelse(full_meb == meb, TRUE, FALSE))
mebs_check <- left_join(mebs, cities.meb, c("City"="city")
mebs_check <- left_join(mebs, cities.meb, c("City"="city"))
mebs_check <- left_join(mebs, cities.meb, c("City"="city"))
View(mebs_check)
mebs_check <- left_join(mebs, cities.meb, c("City"="city")) %>% select("City", "meb.x", "meb.y") %>%
mutate(check = ifelse(full_meb == meb, TRUE, FALSE))
mebs_check <- left_join(mebs, cities.meb, c("City"="city")) %>% select("City", "meb.x", "meb.y") %>%
mutate(check = ifelse(meb.x == meb.y, TRUE, FALSE))
## Sources
source("./R/check_log.R")
source("./R/data_falsification.R")
## falsification
false.surveys <- calculateDifferences(data, tool) %>% filter(number.similar.questions < 5)
library(cluster)
## falsification
false.surveys <- calculateDifferences(data, tool) %>% filter(number.similar.questions < 5)
## falsification
false.surveys <- calculateDifferences(data, tool) #%>% filter(number.similar.questions < 5)
View(false.surveys)
## falsification
false.surveys <- calculateDifferences(data, tool) %>% filter(number.similar.columns < 5)
write.xlsx(false.surveys, paste0("./output/similar survyes_",today,".xlsx"))
today <- Sys.Date()
write.xlsx(false.surveys, paste0("./output/similar survyes_",today,".xlsx"))
### Libya JMMI Validation
rm(list = ls())
library(cleaninginspectoR)
library(tidyverse)
library(openxlsx)
library(cluster)
today <- Sys.Date()
## Sources
source("./R/check_log.R")
source("./R/data_falsification.R")
## Upload data
data <- "./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
data <- SheetList[["Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletion Log"]]
tool <- SheetList[["KOBO survey"]]
mebs <- SheetList[["Cost of MEB"]]
View(mebs)
View(SheetList)
data <- SheetList[["Clean Data"]]
## Issues
names(data)[names(data) == "_index"] <- "index"
data <- data %>% mutate(index = 1:nrow(data))
names(data)[names(data) == "_uuid"] <- "uuid"
issues <- inspect_all(df = data, uuid.column.name = "uuid") %>% filter(!is.na(index)) %>%
mutate(uuid= data[.$index,"uuid",drop=TRUE],city =data[.$index,"q_municipality", drop=TRUE]) %>%
filter(uuid %in% log$uuid)
View(issues)
View(log)
### Upload cleaning log and check that the same uuid have been checked
log <- log %>% filter(question.name %in% names(data))
View(log)
log <- log %>% filter(Question %in% names(data))
View(log)
log.c <- check_log(data, log, variable = "Question",  new_log_var = "Old.Value", new_log_var = "New.Value") %>%
mutate(., check = ifelse(new_value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
log.c <- check_log(data, log, variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value",
uuid_data = "uuid", uuid_log = "UUID") %>%
mutate(., check = ifelse(new_value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
log.c <- check_log(data, log, variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value",
uuid_data = "uuid", uuid_log = "UUID")
View(log.c)
log.c <- check_log(data, log, variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value",
uuid_data = "uuid", uuid_log = "UUID") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
### Check MEBS
items <- data %>% select("q_district", "q_municipality","q_salt_price_per_kilo","q_sugar_price_per_kilo",
"q_flour_price_per_kilo", "q_rice_price_per_kilo", "q_pasta_price_per_500g", "q_couscous_price_per_kilo",
"q_tomatop_price_per_400g", "q_chickpeas_price_per_400g", "q_beans_price_per_400g", "q_cmilk_price_per_200ml",
"q_milk_price_per_liter", "q_gtea_price_per_250g", "q_btea_price_per_250g", "q_oil_price_per_liter",
"q_tuna_price_per_200g", "q_eggs_price_per_30eggs", "q_chicken_price_per_kilo", "q_lamb_price_per_kilo",
"q_bread_price_per_5medium_pieces", "q_tomatoes_price_per_kilo", "q_onions_price_per_kilo", "q_pepper_price_per_kilo",
"q_potatoes_price_per_kilo", "q_hwsoap_price_per_piece", "q_lsoap_price_per_kilo", "q_ldet_price_per_litre",
"q_shampoo_price_per_250ml", "q_dsoap_price_per_liter", "q_toothpaste_price_per_tube", "q_toothbrush_price_per_brush",
"q_spads_price_per_10pads", "q_diapers_price_per_30diapers", "q_hsan_price_per_liter", "q_ssan_price_per_liter",
"q_public_gasoline_price_per_liter", "q_private_gasoline_price_per_liter", "q_paracetamol_price_per_12", "q_Ibuprofen_price_per_20",
"q_vitamin_b_complex_price_per_40", "q_amoxicillin_price_per_21", "q_metoclopramide_price_per_40", "q_water_price_per_liter",
"q_fuel_public_price_per_11kg", "q_fuel_private_price_per_11kg", "cooking_fuel_price_per_11kg")
## sources
source("./R/MEBCalculation_HQ.R")
## sources
source("./R/MEBCalculation_HQ.R")
View(cities.meb)
mebs_check <- left_join(mebs, cities.meb, c("City"="city")) %>% select("City", "meb.x", "meb.y") %>%
mutate(check = ifelse(meb.x == meb.y, TRUE, FALSE))
source("./R/check_log.R")
source("./R/data_falsification.R")
## Upload data
data <- "./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
mebs <- SheetList[["Cost of MEB"]]
View(mebs)
mebs_check <- left_join(mebs, cities.meb, c("City"="city")) %>% select("City", "meb.x", "meb.y") %>%
mutate(check = ifelse(meb.x == meb.y, TRUE, FALSE))
mebs_check <- left_join(mebs, cities.meb, c("city")) %>% select("City", "meb.x", "meb.y") %>%
mutate(check = ifelse(meb.x == meb.y, TRUE, FALSE))
mebs_check <- left_join(mebs, cities.meb, c("city")) %>% select("city", "meb.x", "meb.y") %>%
mutate(check = ifelse(meb.x == meb.y, TRUE, FALSE))
View(mebs_check)
write.xlsx(mebs_check, paste0("./output/mebs check_",today,".xlsx"))
today <- Sys.Date()
write.xlsx(mebs_check, paste0("./output/mebs check_",today,".xlsx"))
## falsification
false.surveys <- calculateDifferences(data, tool) %>% filter(number.similar.columns < 5)
tool <- SheetList[["KOBO survey"]]
data <- SheetList[["Clean Data"]]
## falsification
false.surveys <- calculateDifferences(data, tool) %>% filter(number.similar.columns < 5)
write.xlsx(false.surveys, paste0("./output/similar survyes_",today,".xlsx"))
## falsification
false.surveys <- calculateDifferences(data, tool) %>% filter(number.similar.columns < 5)
## falsification
false.surveys <- calculateDifferences(data, tool) #%>% filter(number.similar.columns < 5)
View(false.surveys)
## falsification
false.surveys <- calculateDifferences(data, tool) %>% filter(number.different.columns < 5)
write.xlsx(false.surveys, paste0("./output/similar survyes_",today,".xlsx"))
Feb_subset <- readRDS("~/REACH HQ/3. Countries/Libya/LBY1702 - JMMI/R validation/Feb_subset.rds")
if (!require("pacman")) install.packages("pacman")
subset_var <-readRDS("./Feb_subset.rds")
subset_var
subset_var <- subset_var[-c(1:2)]
data <- read.xlsx("./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx", sheet = "Clean Data")
data <- data %>% extract(subset_var)
meb.composition <- import("./data/MEB_composition.xlsx", sheet="hh5" ) %>% extract(c("item","quantity"))
View(meb.composition)
data <- within(data, q_municipality[(q_district == "Tripoli" & q_municipality!= "Qasr Ben Ghashir" )] <- "Tripoli")
#data$cooking_fuel_price_per_11kg <- apply(data[,c("q_fuel_public_price_per_11kg","q_fuel_private_price_per_11kg")],1,median,na.rm=T)
data$q_district <-  NULL
colnames(data)[1]  <-  "city"
data.all.2 <- melt(data,id = c("city"))
medians.all <- ddply(data.all.2, .(data.all.2$city,variable), summarise, med = median(value,na.rm=TRUE))
cities.meb <-  data.frame(matrix(ncol = 2, nrow = 0))
colnames(cities.meb) <-  c("city","meb")
libya.item.medians <- ddply(medians.all, .(variable), summarise, med = median(med,na.rm=TRUE))
View(libya.item.medians)
### Libya JMMI Validation
rm(list = ls())
library(cleaninginspectoR)
library(tidyverse)
library(openxlsx)
library(cluster)
today <- Sys.Date()
## Sources
source("./R/check_log.R")
source("./R/data_falsification.R")
## Upload data
data <- "./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
data <- SheetList[["Clean Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletion Log"]]
tool <- SheetList[["KOBO survey"]]
mebs <- SheetList[["Cost of MEB"]]
data <- data %>% mutate(index = 1:nrow(data))
names(data)[names(data) == "_uuid"] <- "uuid"
## Issues
names(data)[names(data) == "_index"] <- "index"
issues <- inspect_all(df = data, uuid.column.name = "uuid") %>% filter(!is.na(index)) %>%
mutate(uuid= data[.$index,"uuid",drop=TRUE],city =data[.$index,"q_municipality", drop=TRUE]) %>%
filter(uuid %in% log$uuid)
write.xlsx(issues, paste0("./output/cleaning_check_",today,".xlsx"))
log <- log %>% filter(Question %in% names(data))
log.c <- check_log(data, log, variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value",
uuid_data = "uuid", uuid_log = "UUID") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
write.xlsx(log.c, paste0("./output/cleaning_log_check_",today,".xlsx"))
### Check MEBS
items <- data %>% select("q_district", "q_municipality","q_salt_price_per_kilo","q_sugar_price_per_kilo",
"q_flour_price_per_kilo", "q_rice_price_per_kilo", "q_pasta_price_per_500g", "q_couscous_price_per_kilo",
"q_tomatop_price_per_400g", "q_chickpeas_price_per_400g", "q_beans_price_per_400g", "q_cmilk_price_per_200ml",
"q_milk_price_per_liter", "q_gtea_price_per_250g", "q_btea_price_per_250g", "q_oil_price_per_liter",
"q_tuna_price_per_200g", "q_eggs_price_per_30eggs", "q_chicken_price_per_kilo", "q_lamb_price_per_kilo",
"q_bread_price_per_5medium_pieces", "q_tomatoes_price_per_kilo", "q_onions_price_per_kilo", "q_pepper_price_per_kilo",
"q_potatoes_price_per_kilo", "q_hwsoap_price_per_piece", "q_lsoap_price_per_kilo", "q_ldet_price_per_litre",
"q_shampoo_price_per_250ml", "q_dsoap_price_per_liter", "q_toothpaste_price_per_tube", "q_toothbrush_price_per_brush",
"q_spads_price_per_10pads", "q_diapers_price_per_30diapers", "q_hsan_price_per_liter", "q_ssan_price_per_liter",
"q_public_gasoline_price_per_liter", "q_private_gasoline_price_per_liter", "q_paracetamol_price_per_12", "q_Ibuprofen_price_per_20",
"q_vitamin_b_complex_price_per_40", "q_amoxicillin_price_per_21", "q_metoclopramide_price_per_40", "q_water_price_per_liter",
"q_fuel_public_price_per_11kg", "q_fuel_private_price_per_11kg", "cooking_fuel_price_per_11kg")
## sources
source("./R/MEBCalculation_HQ.R")
View(cities.meb)
meb.composition <- import("./data/MEB_composition.xlsx", sheet="hh5" ) %>% extract(c("item","quantity"))
data <- within(data, q_municipality[(q_district == "Tripoli" & q_municipality!= "Qasr Ben Ghashir" )] <- "Tripoli")
subset_var <-readRDS("./Feb_subset.rds")
subset_var <- subset_var[-c(1:2)]
data <- read.xlsx("./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx", sheet = "Clean Data")
data <- data %>% extract(subset_var)
meb.composition <- import("./data/MEB_composition.xlsx", sheet="hh5" ) %>% extract(c("item","quantity"))
data <- within(data, q_municipality[(q_district == "Tripoli" & q_municipality!= "Qasr Ben Ghashir" )] <- "Tripoli")
#data$cooking_fuel_price_per_11kg <- apply(data[,c("q_fuel_public_price_per_11kg","q_fuel_private_price_per_11kg")],1,median,na.rm=T)
data$q_district <-  NULL
colnames(data)[1]  <-  "city"
View(data)
data.all.2 <- melt(data,id = c("city"))
medians.all <- ddply(data.all.2, .(data.all.2$city,variable), summarise, med = median(value,na.rm=TRUE))
View(medians.all)
cities.meb <-  data.frame(matrix(ncol = 2, nrow = 0))
colnames(cities.meb) <-  c("city","meb")
libya.item.medians <- ddply(medians.all, .(variable), summarise, med = median(med,na.rm=TRUE))
i=0
for (city in unique(medians.all$`data.all.2$city`)) {
i =i+1
item.medians <- medians.all %>% filter(`data.all.2$city`==city) %>% select(variable,med)
colnames(item.medians)[1]  <-  "item"
colnames(item.medians)[2]  <-  "unit.price"
item.medians$unit.price[item.medians$item=="cooking_fuel_price_per_11kg"]<- median(c(item.medians$unit.price[item.medians$item=="q_fuel_public_price_per_11kg"], item.medians$unit.price[item.medians$item=="q_fuel_private_price_per_11kg"]), na.rm = T)
meb.items <- merge(item.medians,meb.composition,by = "item")
meb.items <- meb.items %>% mutate(price = unit.price * quantity)
# print(city)
# print(meb.items)
# readline(prompt="Press [enter] to continue")
meb.cost <- sum(meb.items$price,na.rm = F)
new.observation <- c(city,meb.cost)
cities.meb[i,] <- new.observation
}
cities.meb$meb <- round(as.numeric(cities.meb$meb),2)
cities.meb <-cities.meb[order(cities.meb$meb,decreasing = T),]
View(cities.meb)
View(data)
unique(data$city)
d
d
View(data)
data <- read.xlsx("./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx", sheet = "Clean Data")
data <- data %>% extract(subset_var)
View(data)
meb.composition <- import("./data/MEB_composition.xlsx", sheet="hh5" ) %>% extract(c("item","quantity"))
data <- within(data, q_municipality[(q_district == "Tripoli" & q_municipality!= "Qasr Ben Ghashir" )] <- "Tripoli")
#data$cooking_fuel_price_per_11kg <- apply(data[,c("q_fuel_public_price_per_11kg","q_fuel_private_price_per_11kg")],1,median,na.rm=T)
data$q_district <-  NULL
data$q_municipality
unique(data$q_municipality)
## sources
source("./R/MEBCalculation_HQ.R")
mebs_check <- left_join(mebs, cities.meb, c("city")) %>% select("city", "meb.x", "meb.y") %>%
mutate(check = ifelse(meb.x == meb.y, TRUE, FALSE))
View(mebs_check)
### Libya JMMI Validation
rm(list = ls())
library(cleaninginspectoR)
library(tidyverse)
library(openxlsx)
library(cluster)
today <- Sys.Date()
## Sources
source("./R/check_log.R")
source("./R/data_falsification.R")
## Upload data
data <- "./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx"
## Upload data
data <- "./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
data <- SheetList[["Clean Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletion Log"]]
tool <- SheetList[["KOBO survey"]]
mebs <- SheetList[["Cost of MEB"]]
## Issues
names(data)[names(data) == "_index"] <- "index"
data <- data %>% mutate(index = 1:nrow(data))
names(data)[names(data) == "_uuid"] <- "uuid"
### Libya JMMI Validation
rm(list = ls())
library(cleaninginspectoR)
library(tidyverse)
library(openxlsx)
library(cluster)
today <- Sys.Date()
## Sources
source("./R/check_log.R")
source("./R/data_falsification.R")
## Upload data
data <- "./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
data <- SheetList[["Clean Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletion Log"]]
tool <- SheetList[["KOBO survey"]]
mebs <- SheetList[["Cost of MEB"]]
## Issues
names(data)[names(data) == "_index"] <- "index"
data <- data %>% mutate(index = 1:nrow(data))
names(data)[names(data) == "_uuid"] <- "uuid"
issues <- inspect_all(df = data, uuid.column.name = "uuid") %>% filter(!is.na(index)) %>%
mutate(uuid= data[.$index,"uuid",drop=TRUE],city =data[.$index,"q_municipality", drop=TRUE]) %>%
filter(uuid %in% log$uuid)
log <- log %>% filter(Question %in% names(data))
log.c <- check_log(data, log, variable = "Question",
old_log_var = "Old.Value", new_log_var = "New.Value",
uuid_data = "uuid", uuid_log = "UUID") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
### Check MEBS
items <- data %>% select("q_district", "q_municipality","q_salt_price_per_kilo","q_sugar_price_per_kilo",
"q_flour_price_per_kilo", "q_rice_price_per_kilo", "q_pasta_price_per_500g", "q_couscous_price_per_kilo",
"q_tomatop_price_per_400g", "q_chickpeas_price_per_400g", "q_beans_price_per_400g", "q_cmilk_price_per_200ml",
"q_milk_price_per_liter", "q_gtea_price_per_250g", "q_btea_price_per_250g", "q_oil_price_per_liter",
"q_tuna_price_per_200g", "q_eggs_price_per_30eggs", "q_chicken_price_per_kilo", "q_lamb_price_per_kilo",
"q_bread_price_per_5medium_pieces", "q_tomatoes_price_per_kilo", "q_onions_price_per_kilo", "q_pepper_price_per_kilo",
"q_potatoes_price_per_kilo", "q_hwsoap_price_per_piece", "q_lsoap_price_per_kilo", "q_ldet_price_per_litre",
"q_shampoo_price_per_250ml", "q_dsoap_price_per_liter", "q_toothpaste_price_per_tube", "q_toothbrush_price_per_brush",
"q_spads_price_per_10pads", "q_diapers_price_per_30diapers", "q_hsan_price_per_liter", "q_ssan_price_per_liter",
"q_public_gasoline_price_per_liter", "q_private_gasoline_price_per_liter", "q_paracetamol_price_per_12", "q_Ibuprofen_price_per_20",
"q_vitamin_b_complex_price_per_40", "q_amoxicillin_price_per_21", "q_metoclopramide_price_per_40", "q_water_price_per_liter",
"q_fuel_public_price_per_11kg", "q_fuel_private_price_per_11kg", "cooking_fuel_price_per_11kg")
## sources
source("./R/MEBCalculation_HQ.R")
mebs_check <- left_join(mebs, cities.meb, c("city")) %>% select("city", "meb.x", "meb.y") %>%
mutate(check = ifelse(meb.x == meb.y, TRUE, FALSE))
View(cities.meb)
View(mebs)
mebs <- mebs %>% select(., "city", "full.meb")
mebs_check <- left_join(mebs, cities.meb, c("city")) %>% select("city", "meb.x", "meb.y") %>%
mutate(check = ifelse(meb.x == meb.y, TRUE, FALSE))
mebs_check <- left_join(mebs, cities.meb, c("city"))
View(mebs_check)
mebs_check <- left_join(mebs, cities.meb, c("city")) %>% mutate(check = ifelse(full.meb == meb, TRUE, FALSE))
write.xlsx(mebs_check, paste0("./output/mebs check_",today,".xlsx"))
library(cleaninginspectoR)
library(tidyverse)
library(openxlsx)
library(cluster)
today <- Sys.Date()
## Sources
source("./R/check_log.R")
source("./R/data_falsification.R")
## Upload data
data <- "./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
View(SheetList)
data <- SheetList[["Clean Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletion Log"]]
tool <- SheetList[["KOBO survey"]]
mebs <- SheetList[["Cost of MEB"]]
## Upload data
data <- "./data/raw/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_July_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
data <- SheetList[["Clean Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletion Log"]]
tool <- SheetList[["KOBO survey"]]
mebs <- SheetList[["Cost of MEB"]]
data <- data %>% mutate(index = 1:nrow(data))
## Issues
names(data)[names(data) == "_index"] <- "index"
names(data)[names(data) == "_uuid"] <- "uuid"
issues <- inspect_all(df = data, uuid.column.name = "uuid") %>% filter(!is.na(index)) %>%
mutate(uuid= data[.$index,"uuid",drop=TRUE],city =data[.$index,"q_municipality", drop=TRUE]) %>%
filter(uuid %in% log$uuid)
write.xlsx(issues, paste0("./output/cleaning_check_",today,".xlsx"))
View(log)
## Upload data
data <- "./data/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_August_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
data <- SheetList[["Clean Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletion Log"]]
tool <- SheetList[["KOBO survey"]]
mebs <- SheetList[["Cost of MEB"]]
## Issues
names(data)[names(data) == "_index"] <- "index"
data <- data %>% mutate(index = 1:nrow(data))
names(data)[names(data) == "_uuid"] <- "uuid"
issues <- inspect_all(df = data, uuid.column.name = "uuid") %>% filter(!is.na(index)) %>%
mutate(uuid= data[.$index,"uuid",drop=TRUE],city =data[.$index,"q_municipality", drop=TRUE]) %>%
filter(uuid %in% log$uuid)
write.xlsx(issues, paste0("./output/cleaning_check_",today,".xlsx"))
write.xlsx(issues, paste0("./output/cleaning_check_",today,".xlsx"), overwrite = TRUE)
log <- log %>% filter(Question %in% names(data))
View(log)
log <- log %>% filter(question.names %in% names(data))
log.c <- check_log(data, log, variable = "question.names",
old_log_var = "old.value", new_log_var = "new.value",
uuid_data = "uuid", uuid_log = "UUID") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
log.c <- check_log(data, log, variable = "question.names",
old_log_var = "old.value", new_log_var = "new.value",
uuid_data = "uuid", uuid_log = "uuid") %>%
mutate(., check = ifelse(New.Value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
log.c <- check_log(data, log, variable = "question.names",
old_log_var = "old.value", new_log_var = "new.value",
uuid_data = "uuid", uuid_log = "uuid") %>%
mutate(., check = ifelse(new.value == value_extracted, "Log applied correctly", "Please check log")) %>%
filter(check == "Please check log")
write.xlsx(log.c, paste0("./output/cleaning_log_check_",today,".xlsx"))
### Check MEBS
items <- data %>% select("q_district", "q_municipality","q_salt_price_per_kilo","q_sugar_price_per_kilo",
"q_flour_price_per_kilo", "q_rice_price_per_kilo", "q_pasta_price_per_500g", "q_couscous_price_per_kilo",
"q_tomatop_price_per_400g", "q_chickpeas_price_per_400g", "q_beans_price_per_400g", "q_cmilk_price_per_200ml",
"q_milk_price_per_liter", "q_gtea_price_per_250g", "q_btea_price_per_250g", "q_oil_price_per_liter",
"q_tuna_price_per_200g", "q_eggs_price_per_30eggs", "q_chicken_price_per_kilo", "q_lamb_price_per_kilo",
"q_bread_price_per_5medium_pieces", "q_tomatoes_price_per_kilo", "q_onions_price_per_kilo", "q_pepper_price_per_kilo",
"q_potatoes_price_per_kilo", "q_hwsoap_price_per_piece", "q_lsoap_price_per_kilo", "q_ldet_price_per_litre",
"q_shampoo_price_per_250ml", "q_dsoap_price_per_liter", "q_toothpaste_price_per_tube", "q_toothbrush_price_per_brush",
"q_spads_price_per_10pads", "q_diapers_price_per_30diapers", "q_hsan_price_per_liter", "q_ssan_price_per_liter",
"q_public_gasoline_price_per_liter", "q_private_gasoline_price_per_liter", "q_paracetamol_price_per_12", "q_Ibuprofen_price_per_20",
"q_vitamin_b_complex_price_per_40", "q_amoxicillin_price_per_21", "q_metoclopramide_price_per_40", "q_water_price_per_liter",
"q_fuel_public_price_per_11kg", "q_fuel_private_price_per_11kg", "cooking_fuel_price_per_11kg")
## sources
source("./R/MEBCalculation_HQ.R")
mebs <- mebs %>% select(., "city", "full.meb")
mebs_check <- left_join(mebs, cities.meb, c("city")) %>% mutate(check = ifelse(full.meb == meb, TRUE, FALSE))
write.xlsx(mebs_check, paste0("./output/mebs check_",today,".xlsx"))
## falsification
false.surveys <- calculateDifferences(data, tool) %>% filter(number.different.columns < 5)
View(tool)
## falsification
false.surveys <- calculateDifferences(data, tool) %>% filter(number.different.columns < 5)
library(cluster)
## falsification
false.surveys <- calculateDifferences(data, tool)
View(data)
data <- SheetList[["Clean Data"]]
## falsification
false.surveys <- calculateDifferences(data, tool) %>% filter(number.different.columns < 5)
write.xlsx(false.surveys, paste0("./output/similar survyes_",today,".xlsx"))
View(cities.meb)
rm(list = ls())
library(cleaninginspectoR)
library(tidyverse)
library(openxlsx)
library(cluster)
today <- Sys.Date()
## Sources
source("./R/check_log.R")
source("./R/data_falsification.R")
## Upload data
data <- "./data/reach_lby_dataset_joint_market_monitoring_initiative_jmmi_August_2021.xlsx"
sheets <- openxlsx::getSheetNames(data)
SheetList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=data)
names(SheetList) <- sheets
data <- SheetList[["Clean Data"]]
log <- SheetList[["Cleaning Log"]]
del <- SheetList[["Deletion Log"]]
tool <- SheetList[["KOBO survey"]]
mebs <- SheetList[["Cost of MEB"]]
del$uuid %in% data$_uuid
del$uuid %in% data$`_uuid`
